// Configurable Physics List Class
//
// Ben Jones, MIT, 24/06/09
//
// Based on the QGSP_BERT physics list supplied with geant 4, but with
// options to switch on and off different physics processed from the config
// file. 
//
// To include a new physics process, create a new physics builder registering
// the relevant particles and interactions.  Then add the builder to the 
// GetPhysicsBuilders and GetDefaultSettings functions in this class,
// using the name by which the builder will be referenced in the config
// file.  Physics builders to be enabled are specified in the LArG4 config.
//
#include <iostream>   
#include <vector>

#include "Geant4/globals.hh"
#include "Geant4/G4ParticleDefinition.hh"
#include "Geant4/G4ParticleWithCuts.hh"
#include "Geant4/G4ProcessManager.hh"
#include "Geant4/G4ProcessVector.hh"
#include "Geant4/G4ParticleTypes.hh"
#include "Geant4/G4ParticleTable.hh"
#include "Geant4/G4EmExtraPhysics.hh"
#include "Geant4/G4ChargeExchangePhysics.hh"
#include "Geant4/G4MuonNuclearProcess.hh"
#include "Geant4/G4Material.hh"
#include "Geant4/G4MaterialTable.hh"
#include "Geant4/G4ios.hh"
#include "Geant4/G4DataQuestionaire.hh"

#include "GArG4/CustomPhysicsTable.hh"
#include "GArG4/MuNuclearSplittingProcess.h"
#include "GArG4/MuNuclearSplittingProcessXSecBias.h"
#include "GArG4/G4SimulationParameters.h"

#include "messagefacility/MessageLogger/MessageLogger.h"

namespace gar{
namespace garg4 {
  static CustomPhysicsTable * TheCustomPhysicsTable;
 
  template<class T> TConfigurablePhysicsList<T>::TConfigurablePhysicsList(G4int ver):  T()
  {
		
   LOG_WARNING("ConfigurablePhysics") <<"Setting up Configurable Physics List";
	
   // note - not sure exact purpose of these commands, but left in from QGSP_BERT list
	
   this->defaultCutValue = 0.7*CLHEP::mm;  
	
   this->SetVerboseLevel(ver);
	
   G4DataQuestionaire it(photon);
	
	
   EnabledPhysics = gar::garg4::G4SimulationParameters::Instance()->EnabledPhysics();
	
   if(EnabledPhysics.size() > 0){		
	
     LOG_WARNING("ConfigurablePhysics") 
     <<"Custom physics list enabled.  Loading from config";
	
     for(auto const& it : EnabledPhysics)	
        LOG_WARNING("ConfigurablePhysics")
        << "Configurable Physics List enabling : "
        << it;
	
   }
   else{
	
     LOG_WARNING("ConfigurablePhysics") 
     << "Custom physics list disabled - using"
     << " default QGSP_BERT configuration";
	
     EnabledPhysics = GetDefaultSettings();
	
   }
		
   // loop through vector of enabled physics and switch on relevant processes 
	
   for(auto const& PhysicsName : EnabledPhysics){
	
    if(TheCustomPhysicsTable->IsPhysicsAvailable(PhysicsName)){
	
      LOG_WARNING("ConfigurablePhysics") <<"ConfigurablePhysicsList Registering physics : " 
                                         << PhysicsName;
	
      G4VPhysicsConstructor* g4v = TheCustomPhysicsTable->GetPhysicsConstructor(PhysicsName);	
	
      if (!PhysicsName.compare("SynchrotronAndGN")){
	
        LOG_WARNING("ConfigurablePhysics") <<"ConfigurablePhysicsList : " 
                                           << PhysicsName 
	                                   << ": Turning on GammaNuclear, Synchrotron.";
	
	G4String on("on");
	
        ((G4EmExtraPhysics*)g4v)->GammaNuclear(on);
	((G4EmExtraPhysics*)g4v)->Synch(on);
		
     }	
	
     this->RegisterPhysics(g4v);
	
   }
   else{

      LOG_WARNING("ConfigurablePhysics") <<"ConfigurablePhysicsList Error : "
                                        << "Physics Module Unavailable - " << PhysicsName;
	
   }
	
  }
 }

  template<class T> TConfigurablePhysicsList<T>::~TConfigurablePhysicsList()
  {
  }

  template<class T> void TConfigurablePhysicsList<T>::SetCuts()
  {
    if(this->verboseLevel >1) G4cout << "ConfigurablePhysicsList::SetCuts:";
    this->SetCutsWithDefault();   
  }
	
  template <class T> std::vector<std::string> TConfigurablePhysicsList<T>::GetDefaultSettings()
  {
	
    // Set default enabled physics processes (equivalent to QGSP_BERT physics list)
	
    std::vector<std::string> TheVector;
	
    TheVector.push_back("Em");
    TheVector.push_back("SynchrotronAndGN");
    TheVector.push_back("Decay");
    TheVector.push_back("Hadron");
    TheVector.push_back("HadronElastic");
    TheVector.push_back("Stopping");
    TheVector.push_back("Ion");
    TheVector.push_back("NeutronTrackingCut");
	
    return TheVector;	
  }

} // garg4

} // gar
// Sept 2009 - Ben Jones, MIT
